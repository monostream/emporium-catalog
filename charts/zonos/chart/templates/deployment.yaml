apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fooocus.fullname" . }}
  labels:
    {{- include "fooocus.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "fooocus.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "fooocus.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fooocus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.gpu.runtimeClassName }}
      runtimeClassName: {{ .Values.gpu.runtimeClassName | quote }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3001
              protocol: TCP
          resources:
            {{- if .Values.gpu.nvidiaEnabled }}
            limits:
              nvidia.com/gpu: '1'
            requests:
              cpu: '2'
              memory: 2Gi
            {{- else }}
            {{- toYaml .Values.resources | nindent 12 }}
            {{- end }}
          env:
          - name: NVIDIA_DRIVER_CAPABILITIES
            value: compute,utility
          - name: NVIDIA_VISIBLE_DEVICES
            value: '0'
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.gpu.nvidiaEnabled }}
        nodeAffinity:
          {{- if .Values.affinity.nodeAffinity }}
          {{- toYaml .Values.affinity.nodeAffinity | nindent 10 }}
          {{- end }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu.present
                operator: In
                values:
                - "true"
        {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fooocus.fullname" . }}
  labels:
    {{- include "fooocus.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "fooocus.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "fooocus.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fooocus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      
      runtimeClassName: "nvidia"
      
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c", "uv run gradio_interface.py"]
          ports:
            - name: http
              containerPort: 7860
              protocol: TCP
          resources:
            {{- if .Values.gpu.nvidiaEnabled }}
            limits:
              nvidia.com/gpu: '1'
            requests:
              cpu: '2'
              memory: 2Gi
            {{- else }}
            {{- toYaml .Values.resources | nindent 12 }}
            {{- end }}
          env:
          - name: NVIDIA_DRIVER_CAPABILITIES
            value: "compute,utility"
          - name: NVIDIA_VISIBLE_DEVICES
            value: '0'
          - name: CUDA_VISIBLE_DEVICES
            value: "0"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.gpu.nvidiaEnabled }}
        nodeAffinity:
          {{- if .Values.affinity.nodeAffinity }}
          {{- toYaml .Values.affinity.nodeAffinity | nindent 10 }}
          {{- end }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu.present
                operator: In
                values:
                - "true"
        {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
