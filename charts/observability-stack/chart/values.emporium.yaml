## @userSupplied PrometheusEnabled
## @label Enable Prometheus
## @type boolean
## @description Enable Prometheus for metrics collection. Default is disabled.
## @optional

## @userSupplied PrometheusRetention
## @label Prometheus Retention Period
## @type string
## @description Retention period for Prometheus metrics (e.g. 10d or 120h). Default is 10d. Only applicable if Prometheus is enabled.
## @optional

## @userSupplied PrometheusRetentionSize
## @label Prometheus Retention Size
## @type string
## @description Retention size for Prometheus metrics (e.g. 20GB, 20GiB, 500MB, 500MiB). Default is "". Only applicable if Prometheus is enabled.
## @optional

## @userSupplied PrometheusStorageSize
## @label Prometheus Storage Size
## @type byteSize
## @description Size of the prometheus storage volume. Default is 20Gi. Only applicable if Prometheus is enabled.
## @optional

## @userSupplied LokiStorageSize
## @label Loki Storage Size
## @type byteSize
## @description Size of the Loki storage volume. Default is 20Gi. Only applicable if Prometheus is enabled.
## @optional

## @userSupplied TempoStorageSize
## @label Tempo Storage Size
## @type byteSize
## @description Size of the Tempo storage volume. Default is 5Gi.
## @optional

## @userSupplied TempoRetention
## @label Tempo Retention Period
## @type string
## @description Retention period for Tempo traces (e.g. 24h or 7d). Default is 7d.
## @optional

prometheus:
  prometheusOperator:
    enabled: {{ default false .Emporium.UserSupplied.PrometheusEnabled }}

    admissionWebhooks:
      timeoutSeconds: 30

  prometheus:
    enabled: {{ default false .Emporium.UserSupplied.PrometheusEnabled }}

    prometheusSpec:
      serviceMonitorSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: false

      podMonitorSelector: {}
      podMonitorSelectorNilUsesHelmValues: false

      probeSelector: {}
      probeSelectorNilUsesHelmValues: false

      ruleSelector: {}
      ruleSelectorNilUsesHelmValues: false

      retention: {{ default "10d" .Emporium.UserSupplied.PrometheusRetention }}
      retentionSize: {{ default "" .Emporium.UserSupplied.PrometheusRetentionSize }}

      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: {{ default "20Gi" .Emporium.UserSupplied.PrometheusStorageSize }}

  nodeExporter:
    enabled: {{ default false .Emporium.UserSupplied.PrometheusEnabled }}

  grafana:
    ingress:
      enabled: true

      annotations:
        {{- if .Emporium.Annotations }}
        {{- toYaml .Emporium.Annotations | nindent 8 }}
        {{- end }}
        kubernetes.io/tls-acme: "true"

      hosts:
        - {{ .Emporium.Integrations.DNS.Hostname }}

      tls:
        - secretName: grafana-{{ .Emporium.Name }}-tls
          hosts:
            - {{ .Emporium.Integrations.DNS.Hostname }}

    adminPassword: ""

    grafana.ini:
      alerting:
        enabled: false
      analytics:
        check_for_updates: false

      users:
        allow_sign_up: false
        allow_org_create: false
        auto_assign_org: true
        auto_assign_org_role: true
        viewers_can_edit: true
        editors_can_admin: false

      auth:
        disable_login_form: false

      auth.basic:
        enabled: false

      auth.anonymous:
        enabled: true
        org_name: Main Org.
        org_role: Viewer

    sidecar:
      datasources:
        enabled: {{ default false .Emporium.UserSupplied.PrometheusEnabled }}

      dashboards:
        enabled: true
        label: grafana_dashboard
        labelValue: 1
        searchNamespace: "ALL"

    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
        {{- if (default false .Emporium.UserSupplied.PrometheusEnabled) }}
        - name: Prometheus
          type: prometheus
          uid: prometheus
          url: http://{{ .Emporium.Name }}-prometheus-prometheus:9090
          access: proxy
        {{- end }}
        - name: Loki
          type: loki
          uid: loki
          url: http://{{ .Emporium.Name }}-loki:3100
          jsonData:
            maxLines: 1000
            derivedFields:
            - name: Trace ID
              datasourceUid: tempo
              matcherRegex: "traceId=(\\w+)"
              url: "$${__value.raw}"
          access: proxy
        - name: Tempo
          type: tempo
          uid: tempo
          url: http://{{ .Emporium.Name }}-tempo:3100
          access: proxy

  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: true
      configReloaders: true
      general: true
      k8s: true
      kubeApiserverAvailability: true
      kubeApiserverBurnrate: true
      kubeApiserverHistogram: true
      kubeApiserverSlos: true
      kubeControllerManager: true
      kubelet: true
      kubeProxy: false
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: true
      kubeStateMetrics: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true

  kubeApiServer:
    enabled: true

  kubeControllerManager:
    enabled: false

  coreDns:
    enabled: true

  kubeEtcd:
    enabled: true

  kubeScheduler:
    enabled: false

  kubeProxy:
    enabled: false

loki:
  deploymentMode: SingleBinary
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: index_
            period: 24h
  singleBinary:
    replicas: 1
    persistence:
      enabled: true
      size: {{ default "50Gi" .Emporium.UserSupplied.LokiStorageSize }}


  minio:
    enabled: false
  chunksCache:
    enabled: false
  gateway:
    enabled: false
  resultsCache:
    enabled: false
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0
  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

tempo:
  persistence:
    enabled: true
    enableStatefulSetAutoDeletePVC: false
    size: {{ default "5Gi" .Emporium.UserSupplied.TempoStorageSize }}
  retention: {{ default "7d" .Emporium.UserSupplied.TempoRetention }}

alloy:
  controller:
    type: daemonset

  alloy:
    resources:
      requests:
        memory: 128Mi
        cpu: 100m

    mounts:
      varlog: true

    configMap:
      create: true

      content: |-
        logging {
                level  = "warn"
                format = "logfmt"
        }

        discovery.kubernetes "kubernetes_pods" {
                role = "pod"
        }

        discovery.relabel "kubernetes_pods" {
                targets = discovery.kubernetes.kubernetes_pods.targets

                rule {
                        source_labels = ["__meta_kubernetes_pod_controller_name"]
                        regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
                        target_label  = "__tmp_controller_name"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
                        regex         = "^;*([^;]+)(;.*)?$"
                        target_label  = "app"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance", "__meta_kubernetes_pod_label_instance"]
                        regex         = "^;*([^;]+)(;.*)?$"
                        target_label  = "instance"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component", "__meta_kubernetes_pod_label_component"]
                        regex         = "^;*([^;]+)(;.*)?$"
                        target_label  = "component"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_node_name"]
                        target_label  = "node_name"
                }

                rule {
                        source_labels = ["__meta_kubernetes_namespace"]
                        target_label  = "namespace"
                }

                rule {
                        source_labels = ["namespace", "app"]
                        separator     = "/"
                        target_label  = "job"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_name"]
                        target_label  = "pod"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_container_name"]
                        target_label  = "container"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                        separator     = "/"
                        target_label  = "__path__"
                        replacement   = "/var/log/pods/*$1/*.log"
                }

                rule {
                        source_labels = ["__meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash", "__meta_kubernetes_pod_annotation_kubernetes_io_config_hash", "__meta_kubernetes_pod_container_name"]
                        separator     = "/"
                        regex         = "true/(.*)"
                        target_label  = "__path__"
                        replacement   = "/var/log/pods/*$1/*.log"
                }
        }

        local.file_match "kubernetes_pods" {
                path_targets = discovery.relabel.kubernetes_pods.output
        }

        loki.process "kubernetes_pods" {
                forward_to = [loki.write.default.receiver]

                stage.cri { }
        }

        loki.source.file "kubernetes_pods" {
                targets               = local.file_match.kubernetes_pods.targets
                forward_to            = [loki.process.kubernetes_pods.receiver]
                legacy_positions_file = "/run/promtail/positions.yaml"
        }

        loki.write "default" {
                endpoint {
                        url = "http://{{ .Emporium.Name }}-loki:3100/loki/api/v1/push"
                }
                external_labels = {}
        }
