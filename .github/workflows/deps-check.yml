name: Deps Checker

on:
  schedule:
    - cron: '0 8 * * *'
    - cron: '0 17 * * *'
  workflow_dispatch:



jobs:
  check-updates:
    runs-on: ubuntu-latest
    container:
      image: emporium.docker.pkg.emporium.rocks/emporium-build:latest
      options: --user root
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_KEY }}  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Git
      run: |
        chown -R $(id -u):$(id -g) $PWD
        git config --global --add safe.directory ${PWD}
        git config user.email "roboterli@users.noreply.github.com"
        git config user.name "Roboterli"
        git fetch origin

    - name: Check and Run Dependency Updates
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        DEPS_FILES=$(find . -name 'deps.json')

        for DEPS_FILE in ${DEPS_FILES}; do
          CHART_PATH=$(dirname "${DEPS_FILE}")
          CHART_NAME=$(basename $CHART_PATH)
          BRANCH_NAME="update/${CHART_NAME}"

          git checkout main
          git pull origin main

          if git rev-parse --verify origin/${BRANCH_NAME} >/dev/null 2>&1; then
            echo "Branch ${BRANCH_NAME} already exists, checking it out."
            git checkout ${BRANCH_NAME}
            git pull origin ${BRANCH_NAME}
          else
            echo "Creating new branch ${BRANCH_NAME}."
            git checkout -b ${BRANCH_NAME}
          fi

          echo "Checking updates for ${CHART_NAME}"
          DEPS_UPDATE_OUTPUT=$(emp chart updates --file "${DEPS_FILE}" --apply)
          echo "${DEPS_UPDATE_OUTPUT}" > "deps-update-${CHART_NAME}.txt"

          if git status --porcelain | grep -qE '^( M|A )'; then
            echo "Changes found for ${CHART_NAME}"

            grep -E '->' "deps-update-${CHART_NAME}.txt" | while read -r LINE; do
              DEP_NAME=$(echo "${LINE}" | awk '{print $1}')
              NEW_VER=$(echo "${LINE}" | sed -E 's/.*->[[:space:]]*//')

              echo "ðŸ”Ž  Fetching release notes for ${DEP_NAME} ${NEW_VER}"

              SUMMARY=$(curl -s https://api.openai.com/v1/responses \
                -H "Authorization: Bearer ${OPENAI_API_KEY}" \
                -H "Content-Type: application/json" \
                -d @- <<EOF | jq -r '.choices[0].message.content'
                {
                  "model": "gpt-4o-search-preview",
                  "tools": [ { "type": "web_search_preview" } ],
                  "messages": [
                    {
                      "role": "system",
                      "content": "You are an expert DevOps assistant. Provide a concise markdown summary of the official release notes. Use bullet points, highlight breaking changes with an ':warning:' emoji, maximum 8 bullets."
                    },
                    {
                      "role": "user",
                      "content": "Official release notes for ${DEP_NAME} ${NEW_VER}"
                    }
                  ]
                }
            EOF
              )

              # Escape back-ticks so we donâ€™t break markdown fences
              SUMMARY_ESCAPED=$(echo "${SUMMARY}" | sed 's/`/\\`/g')

              {
                echo "## ${DEP_NAME} ${NEW_VER} â€“ $(date +%Y-%m-%d)"
                echo
                echo "${SUMMARY_ESCAPED}"
                echo
              } >> CHANGELOG.md
            done

            git add .
            git reset -- deps-update-*.txt
            git commit -m "Update dependencies for ${CHART_NAME} + changelog"
            git push -u origin "${BRANCH_NAME}"

            sleep 5
            if ! gh pr list --head "${BRANCH_NAME}" --base main --json number --jq '.[].number' | grep -q .; then
              PR_TITLE="Update dependencies for ${CHART_NAME}"
              PR_BODY=$(printf 'This PR updates the dependencies and appends a curated changelog.\n\n<details><summary>Dependency updates</summary>\n\n%s\n</details>' "$(cat deps-update-${CHART_NAME}.txt)")
              gh pr create --title "${PR_TITLE}" --body "${PR_BODY}" --base main --head "${BRANCH_NAME}"
            else
              echo "PR already exists â€“ pushed new commit with changelog."
            fi
          else
            echo "No changes for ${CHART_NAME}"
          fi
        done
